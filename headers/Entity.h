#pragma once
#ifndef ENTITY_H
#define ENTITY_H

#include <iostream>
#include <string>
#include <vector>
#include "Inventory.h"

/* Класс Entity представляет любой объект, который может быть размещен на игровой клетке.
   Это включает все растения и животных. В дальнейшем могут быть добавлены другие объекты. */
class Entity
{
protected:
    // Стадия роста объекта
    int growthStage;

    // Уровень полива объекта
    int wateringLevel;

    // Флаг, указывающий, является ли объект животным
    bool isAnimal;

    // Флаг, указывающий, является ли объект растением
    bool isPlant;

public:
    // Имена файлов текстур, связанных с объектом
    std::vector<std::string> textureFilenames;

    // Конструктор для инициализации объекта Entity
    Entity();

    // Геттер для флага, указывающего, является ли объект растением
    // Возвращает: true, если объект является растением, иначе false
    bool get_isPlant();

    // Геттер для флага, указывающего, является ли объект животным
    // Возвращает: true, если объект является животным, иначе false
    bool get_isAnimal();

    // Сеттер для флага, указывающего, является ли объект растением
    // Параметр: _isPlant - булево значение, устанавливающее, является ли объект растением
    void set_isPlant(bool _isPlant);

    // Сеттер для флага, указывающего, является ли объект животным
    // Параметр: _isAnimal - булево значение, устанавливающее, является ли объект животным
    void set_isAnimal(bool _isAnimal);

    // Геттер для стадии роста объекта
    // Возвращает: стадию роста объекта
    int get_growthStage();

    // Геттер для уровня полива объекта
    // Возвращает: уровень полива объекта
    int get_isWatered();

    // Сеттер для стадии роста объекта
    // Параметр: _growthStage - стадия роста, которую нужно установить для объекта
    void set_growthStage(int _growthStage);

    // Сеттер для уровня полива объекта
    // Параметр: _wateringLevel - уровень полива, который нужно установить для объекта
    void set_isWatered(int _wateringLevel);

    // Виртуальная функция для полива объекта (должна быть реализована в производных классах)
    virtual void water() = 0;

    // Виртуальная функция для проверки, умер ли объект (должна быть реализована в производных классах)
    // Возвращает: true, если объект умер, иначе false
    virtual bool checkDeath() = 0;

    // Виртуальная функция для получения типа объекта (должна быть реализована в производных классах)
    // Возвращает: тип объекта
    virtual int get_type() = 0;

    // Виртуальная функция для симуляции роста объекта (должна быть реализована в производных классах)
    // Возвращает: true, если объект вырос, иначе false
    virtual bool grow() = 0;

    // Виртуальная функция для получения максимального уровня полива объекта
    // Возвращает: максимальный уровень полива объекта (например, пшеница:5, ячмень:4 ...)
    virtual int get_maxWateringLevel() = 0;

    // Виртуальная функция для удобрения объекта (должна быть реализована в производных классах)
    virtual void fertilise(Inventory* Inventory);

    // Виртуальная функция для поедания зерна (реализована в классах животных)
    virtual bool eatGrain(Inventory* inventory);

    // Виртуальный деструктор для класса Entity
    virtual ~Entity() {};

    // Функция для получения корректного имени файла текстуры объекта
    // Возвращает: корректное имя файла текстуры объекта
    std::string getCorrectFilename();

    // Виртуальные геттеры и сеттеры для подклассов животных
    virtual int getEggs();
    virtual void setEggs(int _Eggs);
    virtual bool getWool();
    virtual void setWool(bool _Wool);
};

#endif